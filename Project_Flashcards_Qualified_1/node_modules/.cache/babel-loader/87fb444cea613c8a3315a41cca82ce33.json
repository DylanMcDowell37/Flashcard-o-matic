{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcdow\\\\Thinkful\\\\Flashcard-o-matic\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Deck\\\\DeckView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../utils/api/index\";\nimport { useParams } from \"react-router-dom\";\nimport Breadcrumb from \"../Comp/Breadcrumb\";\nimport Buttons from \"../Comp/Buttons\";\nimport CardView from \"../Card/CardView\";\nimport PropTypes from \"prop-types\";\n/**\r\n * A DeckView component displays information about the deck as well as all of\r\n * its cards.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {function} props.removeDeck - Removes the deck passed in when called.\r\n * @param {function} props.removeCard - Removes the card passed in when called.\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a DeckView component.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckView({\n  removeDeck,\n  removeCard,\n  abortController\n}) {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  const {\n    deckId\n  } = useParams(); // get deck when first rendered.\n\n  useEffect(() => {\n    getDeck();\n    return () => {\n      abortController.abort();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\r\n   * Fetches the current deck from the database.\r\n   */\n\n  async function getDeck() {\n    try {\n      const response = await readDeck(deckId, abortController.signal);\n      setDeck(response);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n\n  if (Object.keys(deck).length === 0) return null;\n  const cardsJSX = deck.cards.map(card => /*#__PURE__*/_jsxDEV(CardView, {\n    card: card,\n    removeCard: removeCard\n  }, card.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 44\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: `deck-${deck.id}-view`,\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      deckName: deck.name,\n      deckId: deck.id,\n      page: \"view\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: deck.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: deck.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      names: [\"edit-deck\", \"study\", \"add-card\", \"delete-deck\"],\n      deckId: deck.id,\n      removeDeck: removeDeck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"mt-4\",\n      children: \"Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this), cardsJSX]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }, this);\n}\n\n_s(DeckView, \"N2KTq/8GnvMjzUwlvDPzjz8WVzc=\", false, function () {\n  return [useParams];\n});\n\n_c = DeckView;\nDeckView.propTypes = {\n  removeDeck: PropTypes.func,\n  removeCard: PropTypes.func,\n  abortController: PropTypes.instanceOf(AbortController).isRequired\n};\nexport default DeckView;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckView\");","map":{"version":3,"sources":["C:/Users/mcdow/Thinkful/Flashcard-o-matic/Project_Flashcards_Qualified_1/src/Layout/Deck/DeckView.js"],"names":["React","useState","useEffect","readDeck","useParams","Breadcrumb","Buttons","CardView","PropTypes","DeckView","removeDeck","removeCard","abortController","deck","setDeck","deckId","getDeck","abort","response","signal","error","name","Object","keys","length","cardsJSX","cards","map","card","id","description","propTypes","func","instanceOf","AbortController","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Breadcrumb from \"../Comp/Breadcrumb\";\r\nimport Buttons from \"../Comp/Buttons\";\r\nimport CardView from \"../Card/CardView\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A DeckView component displays information about the deck as well as all of\r\n * its cards.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {function} props.removeDeck - Removes the deck passed in when called.\r\n * @param {function} props.removeCard - Removes the card passed in when called.\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a DeckView component.\r\n */\r\nfunction DeckView({ removeDeck, removeCard, abortController }) {\r\n\tconst [deck, setDeck] = useState({});\r\n\tconst { deckId } = useParams();\r\n\r\n\t// get deck when first rendered.\r\n\tuseEffect(() => {\r\n\t\tgetDeck();\r\n\r\n\t\treturn () => {\r\n\t\t\tabortController.abort();\r\n\t\t};\r\n\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\t\r\n\t/**\r\n\t * Fetches the current deck from the database.\r\n\t */\r\n\tasync function getDeck() {\r\n\t\ttry {\r\n\t\t\tconst response = await readDeck(deckId, abortController.signal);\r\n\t\t\tsetDeck(response);\r\n\t\t}\r\n\t\tcatch(error) {\r\n\t\t\tif(error.name !== \"AbortError\") {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tif(Object.keys(deck).length === 0) return null;\r\n\tconst cardsJSX = deck.cards.map((card) => <CardView key={card.id} card={card} removeCard={removeCard} />);\r\n\treturn (\r\n\t\t<div id={`deck-${deck.id}-view`}>\r\n\t\t\t<Breadcrumb deckName={deck.name} deckId={deck.id} page=\"view\" />\r\n\t\t\t<h5>{deck.name}</h5>\r\n\t\t\t<p>{deck.description}</p>\r\n\r\n\t\t\t<Buttons names={[\"edit-deck\", \"study\", \"add-card\", \"delete-deck\"]} deckId={deck.id} removeDeck={removeDeck} />\r\n\r\n\t\t\t<h3 className=\"mt-4\">Cards</h3>\r\n\t\t\t{cardsJSX}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nDeckView.propTypes = {\r\n\tremoveDeck: PropTypes.func, \r\n\tremoveCard: PropTypes.func,\r\n\tabortController: PropTypes.instanceOf(AbortController).isRequired,\r\n};\r\n\r\nexport default DeckView;"]},"metadata":{},"sourceType":"module"}