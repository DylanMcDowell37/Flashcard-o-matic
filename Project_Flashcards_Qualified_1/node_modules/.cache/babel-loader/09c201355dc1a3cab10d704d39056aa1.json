{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcdow\\\\Thinkful\\\\Flashcard-o-matic\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Card\\\\Card.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n/**\r\n * A Card component is used during a Study session. It shows the front side\r\n * and can be flipped to the back.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Object} props.deck - A deck object representing a stack of cards.\r\n * @param {number} props.cardNum - The index of the card.\r\n * @param {boolean} props.flipped - Whether the card is currently flipped.\r\n * @param {function} props.flip - Flips the card when called.\r\n * @param {function} props.next - Goes to the next card when called.\r\n * @returns {ReactElement} JSX for a Card component.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card({\n  deck,\n  cardNum,\n  flipped,\n  flip,\n  next\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card mt-2\",\n    id: `card-${deck.id}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"card-title\",\n        children: [\"Card \", cardNum + 1, \" of \", deck.cards.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: deck.cards[cardNum][flipped ? \"back\" : \"front\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary mr-2\",\n        onClick: flip,\n        children: \"Flip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }, this), flipped && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary mr-2\",\n        onClick: next,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Card;\nCard.propTypes = {\n  deck: PropTypes.shape({\n    \"name\": PropTypes.string.isRequired,\n    \"description\": PropTypes.string.isRequired,\n    \"id\": PropTypes.number.isRequired\n  }),\n  cardNum: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  flip: PropTypes.func.isRequired,\n  next: PropTypes.func.isRequired\n};\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["C:/Users/mcdow/Thinkful/Flashcard-o-matic/Project_Flashcards_Qualified_1/src/Layout/Card/Card.js"],"names":["React","PropTypes","Card","deck","cardNum","flipped","flip","next","id","cards","length","propTypes","shape","string","isRequired","number","bool","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA,IAA1B;AAAgCC,EAAAA;AAAhC,CAAd,EAAsD;AACrD,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,EAAE,EAAG,QAAOJ,IAAI,CAACK,EAAG,EAA/C;AAAA,2BACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACC;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,4BAAiCJ,OAAO,GAAG,CAA3C,UAAkDD,IAAI,CAACM,KAAL,CAAWC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA,kBAA0BP,IAAI,CAACM,KAAL,CAAWL,OAAX,EAAoBC,OAAO,GAAG,MAAH,GAAY,OAAvC;AAA1B;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,wBAAhC;AAAyD,QAAA,OAAO,EAAEC,IAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,EAMED,OAAO,iBACP;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,sBAAhC;AAAuD,QAAA,OAAO,EAAEE,IAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAgBA;;KAjBQL,I;AAmBTA,IAAI,CAACS,SAAL,GAAiB;AAChBR,EAAAA,IAAI,EAAEF,SAAS,CAACW,KAAV,CAAgB;AACrB,YAAQX,SAAS,CAACY,MAAV,CAAiBC,UADJ;AAErB,mBAAeb,SAAS,CAACY,MAAV,CAAiBC,UAFX;AAGrB,UAAMb,SAAS,CAACc,MAAV,CAAiBD;AAHF,GAAhB,CADU;AAMhBV,EAAAA,OAAO,EAAEH,SAAS,CAACc,MAAV,CAAiBD,UANV;AAOhBT,EAAAA,OAAO,EAAEJ,SAAS,CAACe,IAAV,CAAeF,UAPR;AAQhBR,EAAAA,IAAI,EAAEL,SAAS,CAACgB,IAAV,CAAeH,UARL;AAShBP,EAAAA,IAAI,EAAEN,SAAS,CAACgB,IAAV,CAAeH;AATL,CAAjB;AAYA,eAAeZ,IAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A Card component is used during a Study session. It shows the front side\r\n * and can be flipped to the back.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Object} props.deck - A deck object representing a stack of cards.\r\n * @param {number} props.cardNum - The index of the card.\r\n * @param {boolean} props.flipped - Whether the card is currently flipped.\r\n * @param {function} props.flip - Flips the card when called.\r\n * @param {function} props.next - Goes to the next card when called.\r\n * @returns {ReactElement} JSX for a Card component.\r\n */\r\nfunction Card({ deck, cardNum, flipped, flip, next }) {\r\n\treturn (\r\n\t\t<div className=\"card mt-2\" id={`card-${deck.id}`}>\r\n\t\t\t<div className=\"card-body\">\r\n\t\t\t\t<h4 className=\"card-title\">Card {cardNum + 1} of {deck.cards.length}</h4>\r\n\t\t\t\t<p className=\"card-text\">{deck.cards[cardNum][flipped ? \"back\" : \"front\"]}</p>\r\n\t\t\t\t<button type=\"button\" className=\"btn btn-secondary mr-2\" onClick={flip}>\r\n\t\t\t\t\tFlip\r\n\t\t\t\t</button>\r\n\t\t\t\t{flipped &&\r\n\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary mr-2\" onClick={next}>\r\n\t\t\t\t\t\tNext\r\n\t\t\t\t\t</button>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nCard.propTypes = {\r\n\tdeck: PropTypes.shape({\r\n\t\t\"name\": PropTypes.string.isRequired,\r\n\t\t\"description\": PropTypes.string.isRequired,\r\n\t\t\"id\": PropTypes.number.isRequired,\r\n\t}),\r\n\tcardNum: PropTypes.number.isRequired,\r\n\tflipped: PropTypes.bool.isRequired,\r\n\tflip: PropTypes.func.isRequired,\r\n\tnext: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Card;"]},"metadata":{},"sourceType":"module"}