{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcdow\\\\Thinkful\\\\Flashcard-o-matic\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Deck\\\\DeckList.js\";\nimport React from \"react\";\nimport DeckPreview from \"./DeckPreview\";\nimport Buttons from \"../Comp/Buttons\";\nimport PropTypes from \"prop-types\";\n/**\r\n * A DeckList component contains a list of DeckPreview components.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Array<Object>} props.decks - An array of all deck objects.\r\n * @param {function} props.removeDeck - Removes the deck passed in when called.\r\n * @returns {ReactElement} JSX for a DeckList component.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckList({\n  decks,\n  removeDeck\n}) {\n  const decksJSX = decks.map(deck => /*#__PURE__*/_jsxDEV(DeckPreview, {\n    deck: deck,\n    removeDeck: removeDeck\n  }, deck.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 39\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"deck-list\",\n    children: [/*#__PURE__*/_jsxDEV(Buttons, {\n      names: [\"add-deck\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this), decksJSX]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this);\n}\n\n_c = DeckList;\nDeckList.propTypes = {\n  decks: PropTypes.arrayOf(PropTypes.shape({\n    \"name\": PropTypes.string.isRequired,\n    \"description\": PropTypes.string.isRequired,\n    \"id\": PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  removeDeck: PropTypes.func.isRequired\n};\nexport default DeckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckList\");","map":{"version":3,"sources":["C:/Users/mcdow/Thinkful/Flashcard-o-matic/Project_Flashcards_Qualified_1/src/Layout/Deck/DeckList.js"],"names":["React","DeckPreview","Buttons","PropTypes","DeckList","decks","removeDeck","decksJSX","map","deck","id","propTypes","arrayOf","shape","string","isRequired","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAlB,EAAyC;AACxC,QAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAWC,IAAD,iBAAU,QAAC,WAAD;AAA2B,IAAA,IAAI,EAAEA,IAAjC;AAAuC,IAAA,UAAU,EAAEH;AAAnD,KAAkBG,IAAI,CAACC,EAAvB;AAAA;AAAA;AAAA;AAAA,UAApB,CAAjB;AAEA,sBACC;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,4BACC,QAAC,OAAD;AAAS,MAAA,KAAK,EAAE,CAAC,UAAD;AAAhB;AAAA;AAAA;AAAA;AAAA,YADD,EAEEH,QAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA;;KATQH,Q;AAWTA,QAAQ,CAACO,SAAT,GAAqB;AACpBN,EAAAA,KAAK,EAAEF,SAAS,CAACS,OAAV,CAAkBT,SAAS,CAACU,KAAV,CAAgB;AACxC,YAAQV,SAAS,CAACW,MAAV,CAAiBC,UADe;AAExC,mBAAeZ,SAAS,CAACW,MAAV,CAAiBC,UAFQ;AAGxC,UAAMZ,SAAS,CAACa,MAAV,CAAiBD;AAHiB,GAAhB,EAItBA,UAJI,EAIQA,UALK;AAMpBT,EAAAA,UAAU,EAAEH,SAAS,CAACc,IAAV,CAAeF;AANP,CAArB;AASA,eAAeX,QAAf","sourcesContent":["import React from \"react\";\r\nimport DeckPreview from \"./DeckPreview\";\r\nimport Buttons from \"../Comp/Buttons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A DeckList component contains a list of DeckPreview components.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Array<Object>} props.decks - An array of all deck objects.\r\n * @param {function} props.removeDeck - Removes the deck passed in when called.\r\n * @returns {ReactElement} JSX for a DeckList component.\r\n */\r\nfunction DeckList({ decks, removeDeck }) {\r\n\tconst decksJSX = decks.map((deck) => <DeckPreview key={deck.id} deck={deck} removeDeck={removeDeck} />);\r\n\r\n\treturn (\r\n\t\t<div id=\"deck-list\">\r\n\t\t\t<Buttons names={[\"add-deck\"]} />\r\n\t\t\t{decksJSX}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nDeckList.propTypes = {\r\n\tdecks: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\"name\": PropTypes.string.isRequired,\r\n\t\t\"description\": PropTypes.string.isRequired,\r\n\t\t\"id\": PropTypes.number.isRequired,\r\n\t}).isRequired).isRequired, \r\n\tremoveDeck: PropTypes.func.isRequired, \r\n};\r\n\r\nexport default DeckList;"]},"metadata":{},"sourceType":"module"}