{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcdow\\\\Thinkful\\\\Flashcard-o-matic\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport { listDecks, deleteDeck, createDeck, deleteCard, updateDeck, createCard, updateCard } from \"../utils/api/index\";\nimport Header from \"./comp/Header\";\nimport NotFound from \"./Error/NotFound\";\nimport DeckList from \"./Deck/DeckList\";\nimport Deck from \"./Deck/Deck\";\nimport Form from \"./Form/Form\";\n/**\n * A Layout component is the root file which routes to other components\n * appropriately.\n * @returns {ReactElement} JSX for a Layout component.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Layout() {\n  _s();\n\n  const [decks, setDecks] = useState([]);\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const history = useHistory(); // get decks when first rendered.\n\n  useEffect(() => {\n    getDecks();\n    return () => {\n      abortController.abort();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\n   * Fetches all of the current decks from the database.\n   */\n\n  async function getDecks() {\n    try {\n      const response = await listDecks(signal);\n      setDecks(response);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n  /**\n   * Posts a deck to the database.\n   * @param {Object} deck - A deck object representing a stack of cards.\n   * @returns {number} The id of the newly created deck.\n   */\n\n\n  async function addDeck(deck) {\n    const created = await createDeck(deck, signal);\n    getDecks();\n    return created.id;\n  }\n  /**\n   * Posts a card in the database.\n   * @param {Object} card - A card object representing a flashcard.\n   * @param {number} id - The id of the deck to post in.\n   * @returns {number} The id of the newly edited card.\n   */\n\n\n  async function addCard(card, id) {\n    const created = await createCard(id, card, signal);\n    getDecks();\n    return created.id;\n  }\n  /**\n   * Updates a deck in the database.\n   * @param {Object} deck - A deck object representing a stack of cards.\n   * @returns {number} The id of the newly edited deck.\n   */\n\n\n  async function editDeck(deck) {\n    const edited = await updateDeck(deck, signal);\n    getDecks();\n    return edited.id;\n  }\n  /**\n   * Updates a card in the database.\n   * @param {Object} card - A card object representing a flashcard.\n   * @returns {number} The id of the newly edited card.\n   */\n\n\n  async function editCard(card) {\n    const edited = await updateCard(card, signal);\n    getDecks();\n    return edited.id;\n  }\n  /**\n   * Deletes a deck in the database.\n   * @param {Object} id - id of the deck to delete.\n   */\n\n\n  async function removeDeck(id) {\n    if (window.confirm(`Delete this deck?\\n\\nYou will not be able to recover it.`)) {\n      await deleteDeck(id, signal);\n      getDecks();\n      history.push(\"/\");\n    }\n  }\n  /**\n   * Deletes a card in the database.\n   * @param {Object} id - id of the card to delete.\n   */\n\n\n  async function removeCard(id) {\n    if (window.confirm(`Delete this card?\\n\\nYou will not be able to recover it.`)) {\n      await deleteCard(id, signal);\n      getDecks();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(DeckList, {\n            decks: decks,\n            removeDeck: removeDeck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/new\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            type: \"deck\",\n            edit: false,\n            addDeck: addDeck,\n            abortController: abortController\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/decks/:deckId/\",\n          children: /*#__PURE__*/_jsxDEV(Deck, {\n            editDeck: editDeck,\n            removeDeck: removeDeck,\n            addCard: addCard,\n            editCard: editCard,\n            removeCard: removeCard,\n            abortController: abortController\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          children: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Layout, \"G11efxXmh2SE3Q3tr6boo37MplY=\", false, function () {\n  return [useHistory];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/Users/mcdow/Thinkful/Flashcard-o-matic/Project_Flashcards_Qualified_1/src/Layout/index.js"],"names":["React","Fragment","useState","useEffect","Switch","Route","useHistory","listDecks","deleteDeck","createDeck","deleteCard","updateDeck","createCard","updateCard","Header","NotFound","DeckList","Deck","Form","Layout","decks","setDecks","abortController","AbortController","signal","history","getDecks","abort","response","error","name","addDeck","deck","created","id","addCard","card","editDeck","edited","editCard","removeDeck","window","confirm","push","removeCard"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,QAA0C,kBAA1C;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,EAA4CC,UAA5C,EAAwDC,UAAxD,EAAoEC,UAApE,EAAgFC,UAAhF,QAAkG,oBAAlG;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,MAAT,GAAkB;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMoB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,QAAMC,MAAM,GAAGF,eAAe,CAACE,MAA/B;AACA,QAAMC,OAAO,GAAGnB,UAAU,EAA1B,CAJiB,CAMjB;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACfuB,IAAAA,QAAQ;AAER,WAAO,MAAM;AACZJ,MAAAA,eAAe,CAACK,KAAhB;AACA,KAFD,CAHe,CAOf;AACA,GARQ,EAQN,EARM,CAAT;AAUA;AACD;AACA;;AACC,iBAAeD,QAAf,GAA0B;AACzB,QAAI;AACH,YAAME,QAAQ,GAAG,MAAMrB,SAAS,CAACiB,MAAD,CAAhC;AACAH,MAAAA,QAAQ,CAACO,QAAD,CAAR;AACA,KAHD,CAIA,OAAMC,KAAN,EAAa;AACZ,UAAGA,KAAK,CAACC,IAAN,KAAe,YAAlB,EAAgC;AAC/B,cAAMD,KAAN;AACA;AACD;AACD;AAED;AACD;AACA;AACA;AACA;;;AACC,iBAAeE,OAAf,CAAuBC,IAAvB,EAA6B;AAC5B,UAAMC,OAAO,GAAG,MAAMxB,UAAU,CAACuB,IAAD,EAAOR,MAAP,CAAhC;AACAE,IAAAA,QAAQ;AACR,WAAOO,OAAO,CAACC,EAAf;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACC,iBAAeC,OAAf,CAAuBC,IAAvB,EAA6BF,EAA7B,EAAiC;AAChC,UAAMD,OAAO,GAAG,MAAMrB,UAAU,CAACsB,EAAD,EAAKE,IAAL,EAAWZ,MAAX,CAAhC;AACAE,IAAAA,QAAQ;AACR,WAAOO,OAAO,CAACC,EAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,iBAAeG,QAAf,CAAwBL,IAAxB,EAA8B;AAC7B,UAAMM,MAAM,GAAG,MAAM3B,UAAU,CAACqB,IAAD,EAAOR,MAAP,CAA/B;AACAE,IAAAA,QAAQ;AACR,WAAOY,MAAM,CAACJ,EAAd;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,iBAAeK,QAAf,CAAwBH,IAAxB,EAA8B;AAC7B,UAAME,MAAM,GAAG,MAAMzB,UAAU,CAACuB,IAAD,EAAOZ,MAAP,CAA/B;AACAE,IAAAA,QAAQ;AACR,WAAOY,MAAM,CAACJ,EAAd;AACA;AAED;AACD;AACA;AACA;;;AACC,iBAAeM,UAAf,CAA0BN,EAA1B,EAA8B;AAC7B,QAAGO,MAAM,CAACC,OAAP,CAAgB,0DAAhB,CAAH,EAA+E;AAC9E,YAAMlC,UAAU,CAAC0B,EAAD,EAAKV,MAAL,CAAhB;AACAE,MAAAA,QAAQ;AACRD,MAAAA,OAAO,CAACkB,IAAR,CAAa,GAAb;AACA;AACD;AAED;AACD;AACA;AACA;;;AACC,iBAAeC,UAAf,CAA0BV,EAA1B,EAA8B;AAC7B,QAAGO,MAAM,CAACC,OAAP,CAAgB,0DAAhB,CAAH,EAA+E;AAC9E,YAAMhC,UAAU,CAACwB,EAAD,EAAKV,MAAL,CAAhB;AACAE,MAAAA,QAAQ;AACR;AACD;;AAEA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACF,QAAC,MAAD;AAAA,gCACC,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAA,iCACC,QAAC,QAAD;AAAU,YAAA,KAAK,EAAEN,KAAjB;AAAwB,YAAA,UAAU,EAAEoB;AAApC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADD,eAKC,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,YAAZ;AAAA,iCACC,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC,MAAX;AAAkB,YAAA,IAAI,EAAE,KAAxB;AAA+B,YAAA,OAAO,EAAET,OAAxC;AAAiD,YAAA,eAAe,EAAET;AAAlE;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBALD,eASC,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,iBAAZ;AAAA,iCACC,QAAC,IAAD;AACC,YAAA,QAAQ,EAAEe,QADX;AAEC,YAAA,UAAU,EAAEG,UAFb;AAGC,YAAA,OAAO,EAAEL,OAHV;AAIC,YAAA,QAAQ,EAAEI,QAJX;AAKC,YAAA,UAAU,EAAEK,UALb;AAMC,YAAA,eAAe,EAAEtB;AANlB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBATD,eAoBC,QAAC,KAAD;AAAA,iCACC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBApBD;AAAA;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;GAnIQH,M;UAIQb,U;;;KAJRa,M;AAqIT,eAAeA,MAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport { listDecks, deleteDeck, createDeck, deleteCard, updateDeck, createCard, updateCard } from \"../utils/api/index\";\nimport Header from \"./comp/Header\";\nimport NotFound from \"./Error/NotFound\";\nimport DeckList from \"./Deck/DeckList\";\nimport Deck from \"./Deck/Deck\";\nimport Form from \"./Form/Form\";\n\n/**\n * A Layout component is the root file which routes to other components\n * appropriately.\n * @returns {ReactElement} JSX for a Layout component.\n */\nfunction Layout() {\n\tconst [decks, setDecks] = useState([]);\n\tconst abortController = new AbortController();\n\tconst signal = abortController.signal;\n\tconst history = useHistory();\n\n\t// get decks when first rendered.\n\tuseEffect(() => {\n\t\tgetDecks();\n\n\t\treturn () => {\n\t\t\tabortController.abort();\n\t\t};\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t/**\n\t * Fetches all of the current decks from the database.\n\t */\n\tasync function getDecks() {\n\t\ttry {\n\t\t\tconst response = await listDecks(signal);\n\t\t\tsetDecks(response);\n\t\t}\n\t\tcatch(error) {\n\t\t\tif(error.name !== \"AbortError\") {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Posts a deck to the database.\n\t * @param {Object} deck - A deck object representing a stack of cards.\n\t * @returns {number} The id of the newly created deck.\n\t */\n\tasync function addDeck(deck) {\n\t\tconst created = await createDeck(deck, signal);\n\t\tgetDecks();\n\t\treturn created.id;\n\t}\n\n\t/**\n\t * Posts a card in the database.\n\t * @param {Object} card - A card object representing a flashcard.\n\t * @param {number} id - The id of the deck to post in.\n\t * @returns {number} The id of the newly edited card.\n\t */\n\tasync function addCard(card, id) {\n\t\tconst created = await createCard(id, card, signal);\n\t\tgetDecks();\n\t\treturn created.id;\n\t}\n\n\t/**\n\t * Updates a deck in the database.\n\t * @param {Object} deck - A deck object representing a stack of cards.\n\t * @returns {number} The id of the newly edited deck.\n\t */\n\tasync function editDeck(deck) {\n\t\tconst edited = await updateDeck(deck, signal);\n\t\tgetDecks();\n\t\treturn edited.id;\n\t}\n\n\t/**\n\t * Updates a card in the database.\n\t * @param {Object} card - A card object representing a flashcard.\n\t * @returns {number} The id of the newly edited card.\n\t */\n\tasync function editCard(card) {\n\t\tconst edited = await updateCard(card, signal);\n\t\tgetDecks();\n\t\treturn edited.id;\n\t}\n\n\t/**\n\t * Deletes a deck in the database.\n\t * @param {Object} id - id of the deck to delete.\n\t */\n\tasync function removeDeck(id) {\n\t\tif(window.confirm(`Delete this deck?\\n\\nYou will not be able to recover it.`)) {\n\t\t\tawait deleteDeck(id, signal);\n\t\t\tgetDecks();\n\t\t\thistory.push(\"/\");\n\t\t}\n\t}\n\n\t/**\n\t * Deletes a card in the database.\n\t * @param {Object} id - id of the card to delete.\n\t */\n\tasync function removeCard(id) {\n\t\tif(window.confirm(`Delete this card?\\n\\nYou will not be able to recover it.`)) {\n\t\t\tawait deleteCard(id, signal);\n\t\t\tgetDecks();\n\t\t}\n\t}\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<DeckList decks={decks} removeDeck={removeDeck} />\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route path=\"/decks/new\">\n\t\t\t\t\t\t<Form type=\"deck\" edit={false} addDeck={addDeck} abortController={abortController} />\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route path=\"/decks/:deckId/\">\n\t\t\t\t\t\t<Deck \n\t\t\t\t\t\t\teditDeck={editDeck} \n\t\t\t\t\t\t\tremoveDeck={removeDeck} \n\t\t\t\t\t\t\taddCard={addCard} \n\t\t\t\t\t\t\teditCard={editCard}\n\t\t\t\t\t\t\tremoveCard={removeCard} \n\t\t\t\t\t\t\tabortController={abortController}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route>\n\t\t\t\t\t\t<NotFound />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}