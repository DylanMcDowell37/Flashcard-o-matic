{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mcdow\\\\Thinkful\\\\Flashcard-o-matic\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport { readDeck, readCard } from \"../../utils/api/index\";\nimport Breadcrumb from \"../Comp/Breadcrumb\";\nimport FormArea from \"./FormArea\";\nimport PropTypes from \"prop-types\";\n/**\r\n * A Form component is used to create and edit decks and cards.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {string} props.type - Either \"deck\" or \"card\".\r\n * @param {boolean} props.edit - True if user is editing.\r\n * @param {function} props.addDeck - Adds the deck passed in when called.\r\n * @param {function} props.addCard - Adds the card passed in to a deck when called.\r\n * @param {function} props.editDeck - Edits the deck passed in when called.\r\n * @param {function} props.editCard - Edits the card passed in when called.\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a Form component.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Form({\n  type,\n  edit,\n  addDeck,\n  addCard,\n  editDeck,\n  editCard,\n  abortController\n}) {\n  _s();\n\n  const history = useHistory();\n  let {\n    deckId,\n    cardId\n  } = useParams();\n  const mode = edit ? \"edit\" : \"create\";\n  const keys = type === \"deck\" ? [\"name\", \"description\"] : [\"front\", \"back\"];\n  const initForm = {\n    [keys[0]]: \"\",\n    [keys[1]]: \"\"\n  };\n  const [deck, setDeck] = useState({});\n  const [formData, setFormData] = useState({ ...initForm\n  }); // get deck when first rendered.\n\n  useEffect(() => {\n    getDeck();\n    return () => {\n      abortController.abort();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\r\n   * Fetches the current deck from the database.\r\n   */\n\n  async function getDeck() {\n    if (type === \"deck\" && !edit) return;\n\n    try {\n      const response = await readDeck(deckId, abortController.signal);\n      setDeck(response); // update values if we are editing existing items\n\n      if (edit) {\n        if (response && type === \"deck\") {\n          initForm[keys[0]] = response.name;\n          initForm[keys[1]] = response.description;\n        } else if (type === \"card\") {\n          const card = await readCard(cardId, abortController.signal);\n\n          if (card) {\n            initForm[keys[0]] = card.front;\n            initForm[keys[1]] = card.back;\n          }\n        }\n\n        setFormData({ ...initForm\n        });\n      }\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n  /**\r\n   * Handles any form change made by the user.\r\n   * @param {Event} event - onChange event.\r\n   * @param {EventTarget} target - The element from which this change occured.\r\n   */\n\n\n  function handleChange({\n    target\n  }) {\n    setFormData({ ...formData,\n      [target.name]: target.value\n    });\n  }\n  /**\r\n   * Handles any submit made by the user.\r\n   * @param {Event} event - submit event.\r\n   */\n\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    let newItem = {\n      [keys[0]]: formData[keys[0]],\n      [keys[1]]: formData[keys[1]]\n    }; // if edit -> make sure that item has appropriate id keys.\n\n    if (edit) {\n      newItem[\"id\"] = type === \"deck\" ? parseInt(deckId) : parseInt(cardId);\n\n      if (type === \"card\") {\n        newItem[\"deckId\"] = parseInt(deckId);\n      }\n    } // call appropriate function\n\n\n    const idx = edit ? type === \"deck\" ? await editDeck(newItem) : await editCard(newItem) : type === \"deck\" ? await addDeck(newItem) : await addCard(newItem, deckId); // if new deck -> get id\t\n\n    if (!edit && type === \"deck\") {\n      deckId = idx;\n    }\n\n    history.push(`/decks/${deckId}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: `${type}-form-${mode}`,\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      page: `${mode}-${type}`,\n      deckName: deck ? deck.name : null,\n      deckId: parseInt(deckId),\n      cardId: cardId ? parseInt(cardId) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [type === \"card\" && `${deck.name}: `, mode.charAt(0).toUpperCase() + mode.slice(1), \"\\xA0\", type.charAt(0).toUpperCase() + type.slice(1), \"\\xA0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormArea, {\n        keys: keys,\n        idx: 0,\n        handleChange: handleChange,\n        formData: formData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FormArea, {\n        keys: keys,\n        idx: 1,\n        handleChange: handleChange,\n        formData: formData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary mr-1\",\n          type: \"button\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mr-1\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Form, \"Y06CBk93CHaYwzvf9mRgyBZXeOA=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = Form;\nForm.propTypes = {\n  type: PropTypes.oneOf([\"deck\", \"card\"]).isRequired,\n  edit: PropTypes.bool.isRequired,\n  addDeck: PropTypes.func,\n  addCard: PropTypes.func,\n  editDeck: PropTypes.func,\n  editCard: PropTypes.func,\n  abortController: PropTypes.instanceOf(AbortController).isRequired\n};\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/mcdow/Thinkful/Flashcard-o-matic/Project_Flashcards_Qualified_1/src/Layout/Form/Form.js"],"names":["React","useState","useEffect","useParams","useHistory","readDeck","readCard","Breadcrumb","FormArea","PropTypes","Form","type","edit","addDeck","addCard","editDeck","editCard","abortController","history","deckId","cardId","mode","keys","initForm","deck","setDeck","formData","setFormData","getDeck","abort","response","signal","name","description","card","front","back","error","handleChange","target","value","handleSubmit","event","preventDefault","newItem","parseInt","idx","push","charAt","toUpperCase","slice","propTypes","oneOf","isRequired","bool","func","instanceOf","AbortController"],"mappings":"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","sourcesContent":["  \r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router\";\r\nimport { readDeck, readCard } from \"../../utils/api/index\";\r\nimport Breadcrumb from \"../Comp/Breadcrumb\";\r\nimport FormArea from \"./FormArea\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A Form component is used to create and edit decks and cards.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {string} props.type - Either \"deck\" or \"card\".\r\n * @param {boolean} props.edit - True if user is editing.\r\n * @param {function} props.addDeck - Adds the deck passed in when called.\r\n * @param {function} props.addCard - Adds the card passed in to a deck when called.\r\n * @param {function} props.editDeck - Edits the deck passed in when called.\r\n * @param {function} props.editCard - Edits the card passed in when called.\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a Form component.\r\n */\r\nfunction Form({ type, edit, addDeck, addCard, editDeck, editCard, abortController }) {\r\n\tconst history = useHistory();\r\n\tlet { deckId, cardId } = useParams();\r\n\tconst mode = edit ? \"edit\" : \"create\";\r\n\tconst keys = type === \"deck\" ? [\"name\", \"description\"] : [\"front\", \"back\"];\r\n\tconst initForm = {\r\n\t\t[keys[0]]: \"\",\r\n\t\t[keys[1]]: \"\",\r\n\t};\r\n\tconst [deck, setDeck] = useState({});\r\n\tconst [formData, setFormData] = useState({...initForm});\r\n\t// get deck when first rendered.\r\n\tuseEffect(() => {\r\n\t\tgetDeck();\r\n\t\treturn () => {\r\n\t\t\tabortController.abort();\r\n\t\t};\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\t/**\r\n\t * Fetches the current deck from the database.\r\n\t */\r\n\tasync function getDeck() {\r\n\t\tif(type === \"deck\" && !edit) return;\r\n\t\ttry {\r\n\t\t\tconst response = await readDeck(deckId, abortController.signal);\r\n\t\t\tsetDeck(response);\r\n\r\n\t\t\t// update values if we are editing existing items\r\n\t\t\tif(edit) {\r\n\t\t\t\tif(response && type === \"deck\") {\r\n\t\t\t\t\tinitForm[keys[0]] = response.name;\r\n\t\t\t\t\tinitForm[keys[1]] = response.description;\r\n\t\t\t\t}\r\n\t\t\t\telse if(type === \"card\") {\r\n\t\t\t\t\tconst card = await readCard(cardId, abortController.signal);\r\n\t\t\t\t\tif(card) {\r\n\t\t\t\t\t\tinitForm[keys[0]] = card.front;\r\n\t\t\t\t\t\tinitForm[keys[1]] = card.back;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetFormData({...initForm});\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(error) {\r\n\t\t\tif(error.name !== \"AbortError\") {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles any form change made by the user.\r\n\t * @param {Event} event - onChange event.\r\n\t * @param {EventTarget} target - The element from which this change occured.\r\n\t */\r\n\tfunction handleChange({ target }) {\r\n\t\tsetFormData({...formData, [target.name]: target.value});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles any submit made by the user.\r\n\t * @param {Event} event - submit event.\r\n\t */\r\n\tasync function handleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet newItem = {\r\n\t\t\t[keys[0]]: formData[keys[0]],\r\n\t\t\t[keys[1]]: formData[keys[1]],\r\n\t\t};\r\n\r\n\t\t// if edit -> make sure that item has appropriate id keys.\r\n\t\tif(edit) {\r\n\t\t\tnewItem[\"id\"] = type === \"deck\" ? parseInt(deckId) : parseInt(cardId);\r\n\r\n\t\t\tif(type === \"card\") {\r\n\t\t\t\tnewItem[\"deckId\"] = parseInt(deckId);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// call appropriate function\r\n\t\tconst idx = edit ?\r\n\t\t\t(type === \"deck\" ? await editDeck(newItem) : await editCard(newItem)) :\r\n\t\t\t(type === \"deck\" ? await addDeck(newItem) : await addCard(newItem, deckId));\r\n\r\n\t\t// if new deck -> get id\t\r\n\t\tif(!edit && type === \"deck\") {\r\n\t\t\tdeckId = idx;\r\n\t\t}\r\n\r\n\t\thistory.push(`/decks/${deckId}`);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id={`${type}-form-${mode}`}>\r\n\t\t\t<Breadcrumb \r\n\t\t\t\tpage={`${mode}-${type}`} \r\n\t\t\t\tdeckName={deck ? deck.name : null} \r\n\t\t\t\tdeckId={parseInt(deckId)} \r\n\t\t\t\tcardId={cardId ? parseInt(cardId) : null}\r\n\t\t\t/>\r\n\r\n\t\t\t<h1>\r\n\t\t\t\t{type === \"card\" && `${deck.name}: `}\r\n\t\t\t\t{mode.charAt(0).toUpperCase() + mode.slice(1)}&nbsp;\r\n\t\t\t\t{type.charAt(0).toUpperCase() + type.slice(1)}&nbsp;\r\n\t\t\t</h1>\r\n\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<FormArea\r\n\t\t\t\t\tkeys={keys}\r\n\t\t\t\t\tidx={0}\r\n\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\tformData={formData}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<FormArea\r\n\t\t\t\t\tkeys={keys}\r\n\t\t\t\t\tidx={1}\r\n\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\tformData={formData}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<a href=\"/\">\r\n\t\t\t\t\t<button className=\"btn btn-secondary mr-1\" type=\"button\">Cancel</button>\r\n\t\t\t\t</a>\r\n\r\n\t\t\t\t<button className=\"btn btn-primary mr-1\" type=\"submit\">Submit</button>\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nForm.propTypes = {\r\n\ttype: PropTypes.oneOf([\"deck\", \"card\"]).isRequired, \r\n\tedit: PropTypes.bool.isRequired, \r\n\taddDeck: PropTypes.func,\r\n\taddCard: PropTypes.func, \r\n\teditDeck: PropTypes.func, \r\n\teditCard: PropTypes.func,\r\n\tabortController: PropTypes.instanceOf(AbortController).isRequired\r\n};\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}